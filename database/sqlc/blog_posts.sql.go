// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: blog_posts.sql

package database

import (
	"context"
	"database/sql"
)

const countBlogPosts = `-- name: CountBlogPosts :one
SELECT COUNT(*)
FROM blog_posts
`

func (q *Queries) CountBlogPosts(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countBlogPosts)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createBlogPost = `-- name: CreateBlogPost :one
INSERT INTO blog_posts (title, description, body)
VALUES ($1, $2, $3)
RETURNING id, title, description, body, created_at, updated_at
`

type CreateBlogPostParams struct {
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	Body        string         `json:"body"`
}

func (q *Queries) CreateBlogPost(ctx context.Context, arg CreateBlogPostParams) (BlogPost, error) {
	row := q.db.QueryRowContext(ctx, createBlogPost, arg.Title, arg.Description, arg.Body)
	var i BlogPost
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteBlogPost = `-- name: DeleteBlogPost :exec
DELETE FROM blog_posts
WHERE id = $1
`

func (q *Queries) DeleteBlogPost(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteBlogPost, id)
	return err
}

const getBlogPost = `-- name: GetBlogPost :one
SELECT id, title, description, body, created_at, updated_at
FROM blog_posts
WHERE id = $1
`

func (q *Queries) GetBlogPost(ctx context.Context, id int32) (BlogPost, error) {
	row := q.db.QueryRowContext(ctx, getBlogPost, id)
	var i BlogPost
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listBlogPosts = `-- name: ListBlogPosts :many
SELECT id, title, description, body, created_at, updated_at
FROM blog_posts
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListBlogPostsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListBlogPosts(ctx context.Context, arg ListBlogPostsParams) ([]BlogPost, error) {
	rows, err := q.db.QueryContext(ctx, listBlogPosts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BlogPost
	for rows.Next() {
		var i BlogPost
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Body,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBlogPost = `-- name: UpdateBlogPost :one
UPDATE blog_posts
SET title = $2,
    description = $3,
    body = $4
WHERE id = $1
RETURNING id, title, description, body, created_at, updated_at
`

type UpdateBlogPostParams struct {
	ID          int32          `json:"id"`
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	Body        string         `json:"body"`
}

func (q *Queries) UpdateBlogPost(ctx context.Context, arg UpdateBlogPostParams) (BlogPost, error) {
	row := q.db.QueryRowContext(ctx, updateBlogPost,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Body,
	)
	var i BlogPost
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
